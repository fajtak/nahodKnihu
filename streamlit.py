import streamlit as st
from streamlit_searchbox import st_searchbox
import requests
import pandas as pd
import os

st.set_page_config(
    page_title="Nahoƒè knihu",
    page_icon="üìä",
    layout="wide",
    #initial_sidebar_state="expanded")
)

if "OPENAI_API_KEY" in os.environ.keys():
    pass
    #print(os.environ['OPENAI_API_KEY'])
elif "OPENAI_API_KEY" in st.secrets.keys():
    os.environ["OPENAI_API_KEY"] = st.secrets["OPEN_API_KEY"]

def search_database(searchterm: str) -> list[any]:
    if searchterm:
        res = requests.get(f"https://nahod-knihu-0fe888ecfa27.herokuapp.com/get-books/{searchterm}")
        #print(res.json())
        return [(value["title"],key) for key,value in res.json().items()]
    else:
        []

def get_book_info(id: int) -> dict[str, any]:
    res = requests.get(f"https://nahod-knihu-0fe888ecfa27.herokuapp.com/get-book/{id}")
    #print(res.json())
    return res.json()

def get_results() -> any:
    if len(st.session_state.data) == 0:
        st.warning('Mus√≠te vybrat nƒõjakou Va≈°i obl√≠benou knihu!', icon="‚ö†Ô∏è")
        return None
    book_ids = ",".join(st.session_state.data["id"].to_list())
    #print(book_ids)
    call = f"https://nahod-knihu-0fe888ecfa27.herokuapp.com/recommend-books/{book_ids}?thres_rating={slider_minRatings}&thres_year={slider_minYear}"
    if cbox_authors:
        call += "&exclude_authors"
    if cbox_genres:
        call += "&keep_genres"
    res = requests.get(call)
    #print(res.json())
    #print(pd.DataFrame.from_dict(res.json(),orient="index"))
    st.session_state.results = pd.DataFrame.from_dict(res.json(),orient="index")

def get_results_byText() -> any:
    if len(st.session_state.descText) < 20:
        st.warning('Mus√≠te pou≈æ√≠t alespo≈à 20 znak≈Ø na popis knihy!', icon="‚ö†Ô∏è")
        return None
    #call = f"http://127.0.0.1:8000/recommend-books-byText/{st.session_state.descText}?thres_rating={slider_minRatings}&thres_year={slider_minYear}"
    call = f"https://nahod-knihu-0fe888ecfa27.herokuapp.com//recommend-books-byText/{st.session_state.descText}?thres_rating={slider_minRatings}&thres_year={slider_minYear}"
    res = requests.get(call)
    st.session_state.results = pd.DataFrame.from_dict(res.json(),orient="index")

def callback():
    #print(st.session_state.df_selected_books)
    st.session_state["data"] = st.session_state["data"].drop(st.session_state.df_selected_books["selection"]["rows"],axis=0)
    #print(st.session_state["data"])

@st.dialog("Informace o vybran√© knize")
def vote(item):
    #st.write(item)
    st.title(f"{item['title']} - {item['authors']}")
    st.write(f"Hodnocen√≠: {item['rating']} %")
    st.write(f"Rok vyd√°n√≠: {item['publish_year']}")
    st.write(f"≈Ω√°nry: {', '.join(item['genres'])}")
    st.write(item["description"])
    st.session_state.info_book["selection"]["rows"] = []
    st.link_button("P≈ôej√≠t na datab√°zi knih", item["url"])
    st.session_state.lastShown = item.name

def show_book() -> None:
    book_to_show = st.session_state.results.sort_values("candidates",ascending=False).iloc[st.session_state.info_book["selection"]["rows"][0]]
    if len(st.session_state.info_book["selection"]["rows"]) != 0 and book_to_show.name != st.session_state.lastShown:
        #vote(st.session_state.results.sort_values("candidates",ascending=False).iloc[st.session_state.info_book["selection"]["rows"][0]])
        vote(book_to_show)

if "selected_books" not in st.session_state:
    st.session_state.selected_books = []

if "data" not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=["id","title","authors","rating","publish_year"])

if "results" not in st.session_state:
    st.session_state.results = pd.DataFrame()

if "lastShown" not in st.session_state:
    st.session_state.lastShown = -1

if "descText" not in st.session_state:
    st.session_state.descText = ""

#st.logo("logo.png")
st.sidebar.title("Nahoƒè knihu!")
st.sidebar.subheader("V√°≈° AI knihovn√≠k")
st.sidebar.write("Doƒçetli jsme nƒõkdy knihu a polo≈æili si ot√°zku a jak√° kniha bude dal≈°√≠?")
st.sidebar.write("Jak vyb√≠r√°te nov√© knihy? Doporuƒçen√≠ od rodiny, p≈ô√°tel, na diskuzn√≠m f√≥ru?")
st.sidebar.write("M√°me pro V√°s je≈°tƒõ jednu mo≈ænost!")
st.sidebar.write("Nechte si knihy doporuƒçit od AI pomoc√≠ podobnosti popisk≈Ø knih na obalu knihy.")
st.sidebar.write("Jednodu≈°e zad√°te p√°r podobn√Ωch knih, kter√© se V√°m l√≠bily ...")
st.sidebar.write("... a my V√°m nab√≠dneme dal≈°√≠!")

st.sidebar.divider()

search_mode = st.sidebar.radio(
    "Jak chcete hledat nov√© knihy",
    ["***Podle jin√Ωch knih üìö***", "***Podle Va≈°eho popisu ‚úç***"],
    captions=[
        "Podle podobnosti s vybran√Ωmi knihami.",
        "Podle podobnosti Va≈°eho textu s popisem knihy.",
    ],
)

if search_mode == "***Podle jin√Ωch knih üìö***":
# pass search function to searchbox
    st.session_state.selected_value = st_searchbox(
        search_database,
        placeholder = "N√°zev knihy nebo jm√©no autora",
        default = None,
        label = "Zadej knihy, kter√© sis v posledn√≠ dobƒõ u≈æil:",
        key="book_searchbox",
        clear_on_submit = True,
    )

    if st.session_state.selected_value:
        if st.session_state.selected_value not in st.session_state.selected_books:
            st.session_state.selected_books.append(st.session_state.selected_value)
            book_info = get_book_info(st.session_state.selected_value)
            st.session_state.data.loc[len(st.session_state.data)] = [st.session_state.selected_value,book_info["title"],book_info["authors"],book_info["rating"],book_info["publish_year"]]
            st.session_state.selected_value = None

    search_column_config={
        "title": "N√°zev knihy",
        "authors": "Auto≈ôi",
        "rating": st.column_config.NumberColumn(
            "Hodnocen√≠",
            format="%d ‚≠ê",
            width="small"
        ),
        #"publish_year": "Rok vyd√°n√≠",
        "publish_year": st.column_config.TextColumn(
            "Rok vyd√°n√≠",
            #format="YYYY",
            width="small",
        ),
    }

    if len(st.session_state.data) > 0:
        st.dataframe(st.session_state.data[["title","authors","rating","publish_year"]],hide_index=True,width=1200,key="df_selected_books",on_select=callback,column_config=search_column_config)

else:
    st.session_state.descText = st.text_area("Nov√© knihy by mƒõly b√Ωt o:",placeholder="mlad√©m chlapci, kter√Ω jako d√≠tƒõ p≈ôe≈æil pokus o vra≈ædu a pozdƒõji zjistil, ≈æe jƒõ kouzeln√≠kem ...")



col1, col2, col3 = st.columns((1,2,2))
if search_mode == "***Podle jin√Ωch knih üìö***":
	cbox_authors = col1.checkbox("Vynechat p≈Øvodn√≠ autory",key="cbox_authors")
	cbox_genres = col1.checkbox("Stejn√© ≈æ√°nry",key="cbox_genres")
slider_minRatings = col2.slider("Minim√°ln√≠ hodnocen√≠",0,100,value=70)
slider_minYear = col3.slider("Minim√°ln√≠ rok vyd√°n√≠",1900,2026, value=1970)

if search_mode == "***Podle jin√Ωch knih üìö***":
	st.button("Hledat podobn√© knihy",on_click=get_results)
else:
	st.button("Hledat popsan√© knihy",on_click=get_results_byText)


column_config={
        "title": "N√°zev knihy",
        "authors": "Auto≈ôi",
        "candidates": "Podobnost",
        "publish_year": st.column_config.TextColumn(
            "Rok vyd√°n√≠",
        ),
        "genres": "≈Ω√°nry",
        "rating": st.column_config.NumberColumn(
            "Hodnocen√≠",
            format="%d ‚≠ê"
        ),
        "url": st.column_config.LinkColumn("Odkazy",display_text="Datab√°ze knih"),
    }

if len(st.session_state.results) > 0:
    st.dataframe(st.session_state.results[["title","authors","rating","publish_year","candidates","genres","url"]].sort_values("candidates",ascending=False),width=1200,column_config = column_config,hide_index=True,selection_mode="single-row",on_select=show_book, key="info_book")
    #st.dataframe(st.session_state.results,hide_index=True,width=800)

footer_html = """<div style='text-align: center;'>
  <p>Vyvinuto s ‚ù§Ô∏è  by Faj≈•√°k. P≈ô√≠padn√© dotazy, p≈ô√≠pom√≠nky, st√≠≈ænosti a n√°pady pos√≠lejte na nahodknihu@gmail.com</p>
</div>"""
st.markdown(footer_html, unsafe_allow_html=True)
